/**
 * テスト用関数
 * ダミーデータを使って doPost(e) の動作を確認する
 */
function testSendMail() {
  // フォームから送られてくるパラメータを模擬
  // 複数チェックがある場合は配列で渡す
  const e = {
    parameter: {
      name: 'テストユーザー',
      email: 'test@example.com',
      phone: '090-xxxx-xxxx',
      preferredDate1: '2025-01-01',
      preferredTime1: '10:00',
      preferredDate2: '',
      preferredTime2: '',
      preferredDate3: '',
      preferredTime3: '',
      // 複数選択に対応するため、配列で指定
      selectedMenus: ['fullBodyWithFaceVIO','vio'],
      message: 'テストメッセージ'
    }
  };
  // 実際のフォーム送信と同じ流れを呼び出し
  doPost(e);
}

/**
 * フォームからのPOST送信を受け取るメイン関数
 */
function doPost(e) {
  try {
    // 受け取ったパラメータをログで確認（デバッグ用）
    Logger.log(JSON.stringify(e.parameter));
    
    // パラメータを整形してデータを作成
    const data = buildDataFromParameter(e);
    
    // 予約者に確認メール送信
    sendConfirmationEmail(data);
    
    // 管理者に通知メール送信
    sendNotificationToAdmin(data);
    
    // レスポンスを返す（JSON形式）
    return ContentService
      .createTextOutput(JSON.stringify({
        status: 'success',
        message: '予約を受け付けました'
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    console.error('Error:', error);
    return ContentService
      .createTextOutput(JSON.stringify({
        status: 'error',
        message: error.toString()
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * フォームパラメータをまとめてオブジェクト化
 */
function buildDataFromParameter(e) {
  // 複数チェックされると、Apps Scriptでは配列になることが多いが、
  // 1つだけチェックされた場合は文字列でくることもあるため対処する
  const menusParam = e.parameter.selectedMenus;
  let menus = [];
  if (menusParam) {
    if (Array.isArray(menusParam)) {
      // すでに配列のとき（複数チェックされた場合）
      menus = menusParam;
    } else {
      // 単一選択の場合は string になるので配列化
      menus = [menusParam];
    }
  }
  
  // 希望日時は3つ分まとめる
  const preferences = [
    { date: e.parameter.preferredDate1 || '', time: e.parameter.preferredTime1 || '' },
    { date: e.parameter.preferredDate2 || '', time: e.parameter.preferredTime2 || '' },
    { date: e.parameter.preferredDate3 || '', time: e.parameter.preferredTime3 || '' },
  ];
  
  return {
    name: e.parameter.name || '',
    email: e.parameter.email || '',
    phone: e.parameter.phone || '',
    selectedMenus: menus,
    preferences: preferences,
    message: e.parameter.message || ''
  };
}

/**
 * 予約者に確認メールを送信
 */
function sendConfirmationEmail(data) {
  try {
    const subject = '【Luminoso】カウンセリング予約を受け付けました';
    
    let body = `${data.name} 様\n\n`;
    body += 'Luminosoをご利用いただき、ありがとうございます。\n';
    body += 'カウンセリングのご予約を受け付けました。\n\n';
    body += '【ご予約内容】\n';
    body += `お名前: ${data.name}\n`;
    body += `メールアドレス: ${data.email}\n`;
    body += `電話番号: ${data.phone}\n`;
    body += `希望メニュー: ${data.selectedMenus.join(', ')}\n\n`;
    
    body += '【希望日時】\n';
    if (data.preferences[0].date) {
      body += `第1希望: ${data.preferences[0].date} ${data.preferences[0].time}\n`;
    }
    if (data.preferences[1].date) {
      body += `第2希望: ${data.preferences[1].date} ${data.preferences[1].time}\n`;
    }
    if (data.preferences[2].date) {
      body += `第3希望: ${data.preferences[2].date} ${data.preferences[2].time}\n`;
    }
    
    if (data.message) {
      body += `\n【メッセージ】\n${data.message}\n`;
    }
    
    body += '\n担当者より改めて日時の確定のご連絡をさせていただきます。\n';
    body += 'しばらくお待ちくださいますようお願いいたします。\n\n';
    body += '※このメールは自動送信されています。\n';
    body += '※このメールに返信いただいても対応できかねます。\n\n';
    body += '━━━━━━━━━━━━━━━━━━━━━━━━━━\n';
    body += 'Luminoso\n';
    body += 'TEL: XXX-XXXX-XXXX\n';
    body += 'Email: xxxx@xxxx.com\n';
    body += '━━━━━━━━━━━━━━━━━━━━━━━━━━';
    
    // 予約者へメール送信
    GmailApp.sendEmail(data.email, subject, body);
    console.log('確認メールを送信しました: ' + data.email);
    
  } catch (error) {
    console.error('確認メール送信エラー:', error);
    throw new Error('確認メールの送信に失敗しました: ' + error.message);
  }
}

/**
 * 管理者に通知メールを送信
 */
function sendNotificationToAdmin(data) {
  try {
    // 管理者のメールアドレス
    const adminEmail = 'luminoso2024.ai@gmail.com';
    const subject = '【新規予約】カウンセリング予約が入りました';
    
    let body = '新規カウンセリング予約が入りました。\n\n';
    body += '【予約内容】\n';
    body += `予約日時: ${new Date()}\n`;
    body += `お名前: ${data.name}\n`;
    body += `メールアドレス: ${data.email}\n`;
    body += `電話番号: ${data.phone}\n`;
    body += `希望メニュー: ${data.selectedMenus.join(', ')}\n\n`;
    
    body += '【希望日時】\n';
    if (data.preferences[0].date) {
      body += `第1希望: ${data.preferences[0].date} ${data.preferences[0].time}\n`;
    }
    if (data.preferences[1].date) {
      body += `第2希望: ${data.preferences[1].date} ${data.preferences[1].time}\n`;
    }
    if (data.preferences[2].date) {
      body += `第3希望: ${data.preferences[2].date} ${data.preferences[2].time}\n`;
    }
    if (data.message) {
      body += `\n【メッセージ】\n${data.message}\n`;
    }
    
    // 管理者へメール送信
    GmailApp.sendEmail(adminEmail, subject, body);
    console.log('管理者通知メールを送信しました');
    
  } catch (error) {
    console.error('管理者通知メール送信エラー:', error);
    throw new Error('管理者通知メールの送信に失敗しました: ' + error.message);
  }
}
